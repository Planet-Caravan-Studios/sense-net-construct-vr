---
const {} = Astro.props;
---

<!-- UTM Tester Tool -->
<div  class="EventTesterTool" id="EventTesterTool">
	<div class="heading">
		<h2>Event Tester:</h2>
		<p>shows your live event data</p>
	</div>
	
	<div class="output">
		<div class="outputLine">Event Name: <span class='highlight'>example_event</span> | Timestamp: <span class='highlight'>12:12:59</span></div>
	</div>

</div>

<style lang="scss">
	.EventTesterTool{
		padding: 1em;
		border: var(--border-settings-main);
		width: 100%;
		max-width: var(--element-width-2);
		box-shadow: var(--shadow-1);
		margin: auto;
		margin-bottom: 4rem;
		.heading{
			border-bottom:var(--border-settings-main);
			padding-bottom: 0.5em;
			margin-bottom: 0.5em;
			h2{
				margin: 0;
				margin-bottom: 1em;
				display: inline;
			}
			p{
				display: inline;
			}
		}

		.output{
			padding: 1em;
			border: var(--border-settings-main);
			width: 100%;
			height: 15em;
			overflow-y: scroll;
			/*.outputLine{
				border-bottom: var(--border-settings-main);
				&::before{
					content:">";
					font-weight: 800;
					font-size: 1.5em;
				}
			}*/
		} 
		
	}
</style>

<style lang="scss" is:global>
	.EventTesterTool .output .outputLine{
		border-bottom: var(--border-settings-main);
		margin-bottom: 0.5em;
		&::before{
			content:">";
			font-weight: 800;
			font-size: 1.5em;
			margin-right: 1em;
		}
		.highlight{
			display: inline-block;
			color: var(--white);
			background-color: var(--black);
			padding: 0px 5px;
		}
	}
</style>

<script>
//Get TimeStamp
function BasicTimestamp() {
	let currentDate = new Date();

	//let year = currentDate.getFullYear();
	//let month = currentDate.getMonth() + 1; // Months are zero-based, so add 1
	//let day = currentDate.getDate();
	let hours = currentDate.getHours();
	let minutes = currentDate.getMinutes();
	let seconds = currentDate.getSeconds();

	//console.log(`${year}-${month}-${day} ${hours}:${minutes}:${seconds}`);
	let formattedTimestamp = `${hours}:${minutes}:${seconds}`;
	return formattedTimestamp;
}

//Create Text Element
function EventTesterToolText(event_name){
	console.log("EventTesterToolText()");
	//Initial Vars
		let text = "Event Name: <span class='highlight'>{event_name}</span> | Timestamp: <span class='highlight'>{timestamp}</span>";
		let timestamp = BasicTimestamp();
	
	//Formatting
		//update with event name
		text = text.replace('{event_name}', event_name);
		//update with timestamp
		text = text.replace('{timestamp}', timestamp);

	//Add HTML tags
		let htmlString = `<div class="outputLine">${text}</div>`
	//Return full output
		return htmlString; 
}

function EventTesterToolNewLine(event_name){
	console.log("EventTesterToolNewLine()");
	let parentElement = document.querySelector('#EventTesterTool .output');
	let htmlString = EventTesterToolText(event_name);
	console.log(htmlString);
	//parentElement.innerHtml += htmlString;
	parentElement.insertAdjacentHTML("beforeend", htmlString)
	
	return false;
}

//TRIGGER
let elements = document.querySelectorAll('[data-click-event]');
elements.forEach(element => {
	element.addEventListener('click', function() {
		console.log('[data-click-event] click');
		let event_name = element.getAttribute("data-click-event");
		EventTesterToolNewLine(event_name);
	}, false);
});
</script>
